NNU-Machine-Learning-2020
Aleesha Chavez, Garrisen Cizmich, Enoch Levandovsky

In this folder, you will find a DataFormatAdjuster program and a DecisionTree program, both meant to be run from the command line.
You will also find sample labeled data in the LabeledData folder.
All source code for both programs and Visual Studio solution files are located in the SourceCode folder.

To generate training data and associated test data from labeled data, run DataFormatAdjuster with the -t option.
Here is an example using the LabeledData.csv file: "DataFormatAdjuster -t LabeledData\LabeledData.csv TrainingData"
This statement will generate two files in the TrainingData folder: LabeledData_Trainer.in and LabeledData_Tester.txt.
The .in file contains training data in the format expected by the DecisionTree program, while the .txt files contains mutually exclusive test data that is ready to classify.

To generate formatted data to classify without training data, run DataFormatAdjuster with the -c option.
Here is an example using the LabeledData.csv file: "DataFormatAdjuster -c LabeledData\LabeledData.csv ClassifierReadyData"
This statement will generate one file in the ClassifierReadyData folder: LabeledData_ToClassify.txt.
This file contains every tuple from the input file in the format needed for the DecisionTree program to classify it.

To train an ID3 decision tree model, run DecisionTree with the -t option.
For example, this statement will use the training data generated above: "DecisionTree -t TrainingData\LabeledData_Trainer.in Classifiers"
This statement will generate a classifier file in the Classifiers folder named "LabeledData_Trainer_Classifier.txt."
This classifier file can be used with the DecisionTree program to classify tuples in files generated by the DataFormatAdjuster program.

To classify tuples with an existing classifier, run DecisionTree with the -c option.
Using the classifier and test data generated above would require the following statement: "DecisionTree -c Classifiers\LabeledData_Trainer_Classifier.txt TrainingData\LabeledData_Tester.txt ClassifiedData No"
This statement will generate a file containing each tuple and its associated class in the ClassifiedData folder named "LabeledData_Tester_Classified.csv."
The final argument in the statement represents the required default class if the classifier cannot otherwise classify a tuple.

For more information on each of the programs or on a specific option, run either program without any arguments from the command line or run the program with only the option specified.
(e.g. "DecisionTree" or "DataFormatAdjuster -c")